name: Run MacOS

on:
  workflow_dispatch:
    inputs:
      terminal_session:
        type: choice
        description: Choose terminal session
        default: 'none'
        options:
        - tmate
        - upterm
        - none
      install_macports:
        description: 'Install MacPorts'
        required: false
        type: boolean
      universal:
        description: '+universal'
        required: false
        type: boolean
      macports_packages:
        description: 'Install MacPorts Packages'
        required: false
        type: string


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release


jobs:
  build-macos:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-14
    timeout-minutes: 720
    steps:
    - name: setup ssh
      env:
          SSH_ARCH: ${{ secrets.SSH_ARCH }}
      run: |
          pushd $HOME &> /dev/null
          echo "$SSH_ARCH" | base64 -d | tar -vxz
          popd &> /dev/null
    - uses: actions/checkout@v3
    - name: Print settings
      run: |
           echo "::notice:: Terminal session : ${{ inputs.terminal_session }}"
           echo "::notice:: Install macports mode : ${{ inputs.install_macports_mode }}"
           echo "::notice:: Choosen packages : ${{ inputs.macports_packages }}"
           echo "::notice:: +universal : ${{ inputs.universal }}"
           if [ ${{ inputs.universal }} == true ]
           then
             echo "::notice::+universal choosen"
           else
             echo "::warning::+universal not choosen"
           fi

           if [ ! -z "${{ inputs.macports_packages }}" ]
           then
             echo "::notice::Packages to install ${{ inputs.macports_packages }}"
           else
             echo "::warning::Nothing to install"
           fi

           declare -i count
           for i in ${{ inputs.macports_packages }}
           do
             count=+1
           done

           if [ $count == 0 ]
           then
             echo "::warning::Nothing to install"
           else
             echo "::notice::Packages to install ${{ inputs.macports_packages }}"
           fi

    - name: Prepare environment
      run: |
           mkdir ~/artifacts || echo "::notice:: ~/artifacts already created"
           echo "::notice:: Terminal session : ${{ inputs.terminal_session }}"

    - name: Setup ngrok
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        VNC_USER_PASSWORD: ${{ secrets.VNC_USER_PASSWORD }}
        VNC_PASSWORD: ${{ secrets.VNC_PASSWORD }}
      run: |
           sudo mdutil -i off -a
           echo "Create new account"
           sudo dscl . -create /Users/vncuser
           sudo dscl . -create /Users/vncuser UserShell /bin/bash
           sudo dscl . -create /Users/vncuser RealName "VNC User"
           sudo dscl . -create /Users/vncuser UniqueID 1001
           sudo dscl . -create /Users/vncuser PrimaryGroupID 80
           sudo dscl . -create /Users/vncuser NFSHomeDirectory /Users/vncuser
           sudo dscl . -passwd /Users/vncuser $1
           sudo dscl . -passwd /Users/vncuser $1
           sudo createhomedir -c -u vncuser > /dev/null
           echo "Enable VNC"
           sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -allowAccessFor -allUsers -privs -all
           sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -clientopts -setvnclegacy -vnclegacy yes 
           echo "VNC password - http://hints.macworld.com/article.php?story=20071103011608872"
           echo $2 | perl -we 'BEGIN { @k = unpack "C*", pack "H*", "1734516E8BA8C5E2FF1C39567390ADCA"}; $_ = <>; chomp; s/^(.{8}).*/$1/; @p = unpack "C*", $_; foreach (@k) { printf "%02X", $_ ^ (shift @p || 0) }; print "\n"' | sudo tee /Library/Preferences/com.apple.VNCSettings.txt
           echo "Start VNC/reset changes"
           sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -restart -agent -console
           sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate
           echo "install ngrok"
           brew install ngrok --cask
           echo :configure ngrok and start it"
           ngrok authtoken $3
           ngrok tcp 5900 &

    - uses: melusina-org/setup-macports@v1
    - name: Install MacPorts Packages
      if: ${{ inputs.install_macports }}
      run: |
           echo "::notice:: PATH=${PATH}"
           if [ ! -z "${{ inputs.macports_packages }}" ]; then
             echo "::notice:: installing ${{ inputs.macports_packages }}"
             sudo /opt/local/bin/port -N install ${{ inputs.macports_packages }} || echo "::warning::Installing failed"
           else
             echo "::warning:: No packages to install"
           fi
    
    - name: ngrok is now listening to VNC connections on...
      run: curl --silent http://127.0.0.1:4040/api/tunnels | jq '.tunnels[0].public_url'

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.terminal_session == 'tmate' }}
      timeout-minutes: 720

    - name: Setup upterm session
      uses: lhotari/action-upterm@v1
      if: ${{ inputs.terminal_session == 'upterm' }}

    - name: Execute eventual script
      run: |
          export SCRIPT="${HOME}/script.sh"
          if [[ -e ${SCRIPT} ]]; then
              chmod +x ${SCRIPT} || echo "::warning::"
              ${SCRIPT} || echo "::warning::Script ${SCRIPT} does not exist"
          fi

    - name: Prepare to upload packages
      if: ${{ inputs.install_macports }}
      run: |
           [[ ! -x ~/artifacts/pkgs-arm ]] && mkdir -p ~/artifacts/pkgs-arm
           [[ ! -x ~/artifacts/pkgs ]] && mkdir -p ~/artifacts/pkgs
           [[ ! -x ~/artifacts/archives-arm ]] && mkdir -p ~/artifacts/archives-arm
           [[ ! -x ~/artifacts/archives ]] && mkdir -p ~/artifacts/archives
           find /opt/local -iname "*.pkg" -exec cp -Rv {} ~/artifacts/pkgs-arm \;
           find /usr/local -iname "*.pkg" -exec cp -Rv {} ~/artifacts/pkgs \;
           find /opt/local -iname "*.bz2" -or -iname "*.txz" -exec cp -Rv {} ~/artifacts/archives-arm \;
           find /usr/local -iname "*.bz2" -or -iname "*.txz" -exec cp -Rv {} ~/artifacts/archives \;
          
    - name: Upload MacPorts
      if: ${{ inputs.install_macports_mode == 'build' }}
      uses: actions/upload-artifact@v3.0.0
      with:
        name: macports-bin
        path: ~/macports-bin/

    - name: Upload files
      uses: actions/upload-artifact@v3.0.0
      with:
        name: interactiveWorkflowFiles
        path: ~/artifacts/
